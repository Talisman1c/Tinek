# main.py
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
import uvicorn
import requests
import os
import json
import logging
import time
from typing import Dict, Any
from tinkoff.invest import (
    Client,
    RequestError,
    OrderDirection,
    OrderType
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TINKOFF_TOKEN = os.getenv("TINKOFF_TOKEN")
if not TINKOFF_TOKEN:
    raise RuntimeError("TINKOFF_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_CHAT_ID:
    raise RuntimeError("TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

USE_SANDBOX = os.getenv("USE_SANDBOX", "true").lower() == "true"

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ –∏ FIGI
FIGI_MAP: Dict[str, str] = {
    "SBER": "BBG004730N88",
    "GAZP": "BBG004730ZJ9",
    "YNDX": "BBG005D58C28",
    "AAPL": "BBG000B9XRY4",  # Apple
    "TSLA": "BBG00F8TV999",  # Tesla
    "AMZN": "BBG000B9XNP4",  # Amazon
    # –î–æ–±–∞–≤—å —Å–≤–æ–∏
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ===
def send_telegram(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    try:
        response = requests.post(
            url,
            data={"chat_id": TELEGRAM_CHAT_ID, "text": message},
            timeout=10
        )
        if response.status_code == 200:
            logger.info(f"‚úÖ Telegram: {message[:50]}...")
        else:
            logger.error(f"‚ùå Telegram API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Sandbox (–æ–¥–∏–Ω —Ä–∞–∑!) ===
@app.get("/init-sandbox")
def init_sandbox():
    if not USE_SANDBOX:
        msg = "‚ö†Ô∏è Sandbox –≤—ã–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
        logger.warning(msg)
        send_telegram(msg)
        return {"status": "error", "msg": msg}
    
    try:
        with Client(TINKOFF_TOKEN) as client:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—á—ë—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            try:
                client.sandbox.sandbox_remove_post()
            except:
                pass

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
            client.sandbox.sandbox_register_post()

            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
            client.sandbox.sandbox_currencies_balance_post(balance=1_000_000, currency="RUB")
            client.sandbox.sandbox_currencies_balance_post(balance=10_000, currency="USD")

            msg = "‚úÖ Sandbox –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: 1 –º–ª–Ω RUB, 10k USD"
            logger.info(msg)
            send_telegram(msg)
            return {"status": "ok", "message": "Sandbox –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"}
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Sandbox: {e}"
        logger.error(error_msg)
        send_telegram(error_msg)
        return {"status": "error", "message": str(e)}

# === –°–±—Ä–æ—Å sandbox (—É–¥–æ–±–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤) ===
@app.get("/reset-sandbox")
def reset_sandbox():
    if not USE_SANDBOX:
        return {"status": "error", "msg": "Sandbox –≤—ã–∫–ª—é—á–µ–Ω"}
    try:
        with Client(TINKOFF_TOKEN) as client:
            client.sandbox.sandbox_remove_post()
            client.sandbox.sandbox_register_post()
            client.sandbox.sandbox_currencies_balance_post(balance=1_000_000, currency="RUB")
        msg = "üîÑ Sandbox —Å–±—Ä–æ—à–µ–Ω –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω"
        send_telegram(msg)
        logger.info(msg)
        return {"status": "ok", "message": "Sandbox —Å–±—Ä–æ—à–µ–Ω"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ sandbox: {e}")
        return {"status": "error", "message": str(e)}

# === –í–µ–±—Ö—É–∫ –æ—Ç TradingView ===
@app.post("/webhook")
async def tradingview_webhook(request: Request):
    try:
        data = await request.json()
    except:
        try:
            body = await request.body()
            data = json.loads(body.decode('utf-8'))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            send_telegram("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")
            raise HTTPException(status_code=400, detail="Invalid JSON")

    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª: {data}")

    action = data.get("action", "").lower()
    ticker = data.get("ticker", "").upper()
    lots = int(data.get("lots", 1))

    if action not in ["buy", "sell"]:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: action='{action}' ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'buy' –∏–ª–∏ 'sell'"
        logger.error(error_msg)
        send_telegram(error_msg)
        raise HTTPException(status_code=400, detail="Invalid action")

    if ticker not in FIGI_MAP:
        error_msg = f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: {ticker}"
        logger.error(error_msg)
        send_telegram(error_msg)
        raise HTTPException(status_code=400, detail="Unknown ticker")

    figi = FIGI_MAP[ticker]

    # === –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ===
    try:
        with Client(TINKOFF_TOKEN) as client:
            accounts = client.users.get_accounts().accounts
            account_id = accounts[0].id

            direction = (
                OrderDirection.ORDER_DIRECTION_BUY
                if action == "buy"
                else OrderDirection.ORDER_DIRECTION_SELL
            )

            # üî• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π order_id (–≤–∞–∂–Ω–æ!)
            order_id = f"auto_{action}_{ticker}_{int(time.time() * 1000)}"

            response = client.orders.post_order(
                figi=figi,
                quantity=lots,
                direction=direction,
                order_type=OrderType.ORDER_TYPE_MARKET,
                account_id=account_id,
                order_id=order_id
            )

            status_text = "‚úÖ –ö–£–ü–õ–ï–ù–û" if action == "buy" else "‚úÖ –ü–†–û–î–ê–ù–û"
            msg = f"{status_text} {lots} –ª–æ—Ç–æ–≤ {ticker}\n"
            msg += f"üìä –ó–∞—è–≤–∫–∞: {response.order_id}\n"
            msg += f"üìà –°—Ç–∞—Ç—É—Å: {response.execution_report_status}"

            send_telegram(msg)
            logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: {response.order_id}")

            return JSONResponse({
                "status": "ok",
                "order_id": response.order_id,
                "figi": figi,
                "action": action,
                "lots": lots
            })

    except RequestError as api_ex:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ API: {api_ex.message}"
        logger.error(error_msg)
        send_telegram(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        logger.error(error_msg)
        send_telegram(error_msg)
        raise HTTPException(status_code=500, detail=error_msg)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ ===
@app.get("/")
def home():
    return {
        "status": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "endpoints": ["/webhook", "/init-sandbox", "/reset-sandbox"],
        "use_sandbox": USE_SANDBOX
    }

# –ó–∞–ø—É—Å–∫ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ...")
    uvicorn.run(app, host="0.0.0.0", port=8000)

